#!/bin/bash

# Pre-commit hook to run SwiftLint
# Prevents commits with code quality violations

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Running pre-commit quality checks..."

# Check if Package.swift is staged for commit
STAGED_PACKAGE_SWIFT=$(git diff --cached --name-only --diff-filter=ACM | grep -E '^Package\.swift$' || true)

if [ -n "$STAGED_PACKAGE_SWIFT" ]; then
    echo "üì¶ Validating Package.swift syntax..."
    
    # Validate Package.swift syntax by resolving dependencies
    if ! swift package resolve --quiet 2>/dev/null; then
        echo -e "${RED}‚ùå Package.swift syntax validation failed${NC}"
        echo
        echo -e "${YELLOW}üí° Package.swift has syntax errors that prevent dependency resolution:${NC}"
        echo "   - Check for trailing commas, missing commas, or invalid syntax"
        echo "   - Run 'swift package resolve' locally to see detailed error messages"
        echo "   - Verify all target dependencies are correctly specified"
        echo "   - Fix Package.swift syntax and stage changes before committing"
        echo
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Package.swift syntax is valid${NC}"
else
    echo "‚ÑπÔ∏è Package.swift not modified in this commit"
fi

# Get list of staged Swift files
STAGED_SWIFT_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(swift)$' || true)

if [ -z "$STAGED_SWIFT_FILES" ]; then
    echo -e "${GREEN}‚úÖ No Swift files staged for commit${NC}"
    exit 0
fi

echo "üìù Checking files:"
echo "$STAGED_SWIFT_FILES" | sed 's/^/  - /'

# Check if SwiftLint is available
if ! command -v swiftlint &> /dev/null; then
    echo -e "${RED}‚ùå SwiftLint not found. Please install it first:${NC}"
    echo "   brew install swiftlint"
    exit 1
fi

# Create temporary file for staged content
TEMP_DIR=$(mktemp -d)
trap "rm -rf $TEMP_DIR" EXIT

# Copy staged files to temp directory to lint only staged changes
for FILE in $STAGED_SWIFT_FILES; do
    TEMP_FILE="$TEMP_DIR/$FILE"
    mkdir -p "$(dirname "$TEMP_FILE")"
    git show :$FILE > "$TEMP_FILE"
done

# Run SwiftLint on staged files
echo "üèÉ‚Äç‚ôÇÔ∏è Running SwiftLint..."

# Run SwiftLint on only the staged files in temp directory
TEMP_FILES=""
for FILE in $STAGED_SWIFT_FILES; do
    TEMP_FILE="$TEMP_DIR/$FILE"
    TEMP_FILES="$TEMP_FILES $TEMP_FILE"
done

cd "$TEMP_DIR"
SWIFTLINT_OUTPUT=$(swiftlint lint $TEMP_FILES --config "$OLDPWD/.swiftlint.yml" 2>&1 || true)
SWIFTLINT_EXIT_CODE=$?

# Check SwiftLint results
if ! echo "$SWIFTLINT_OUTPUT" | grep -q "Found 0 violations"; then
    echo -e "${RED}‚ùå SwiftLint found violations:${NC}"
    echo
    echo "$SWIFTLINT_OUTPUT"
    echo
    echo -e "${YELLOW}üí° Fix these violations before committing:${NC}"
    echo "   - Run 'swiftlint --fix' to auto-correct simple violations"
    echo "   - Run 'swiftlint' to see all violations"
    echo "   - Stage your fixes and try committing again"
    echo
    exit 1
fi

echo -e "${GREEN}‚úÖ SwiftLint passed! No violations found.${NC}"

# Verify Swift files compile successfully  
echo "üî® Verifying Swift compilation..."
cd "$OLDPWD"

# Fast syntax check using Swift compiler on staged files only
COMPILATION_ERRORS=""
for FILE in $STAGED_SWIFT_FILES; do
    if [ -f "$FILE" ]; then
        echo "  Checking $FILE..."
        SWIFT_OUTPUT=$(swift -frontend -parse "$FILE" 2>&1)
        SWIFT_EXIT_CODE=$?
        
        if [ $SWIFT_EXIT_CODE -ne 0 ]; then
            COMPILATION_ERRORS="$COMPILATION_ERRORS\n$FILE:\n$SWIFT_OUTPUT\n"
        fi
    fi
done

if [ -z "$COMPILATION_ERRORS" ]; then
    echo -e "${GREEN}‚úÖ All staged Swift files compile successfully!${NC}"
else
    echo -e "${RED}‚ùå Compilation errors found in staged files:${NC}"
    echo -e "$COMPILATION_ERRORS"
    echo
    echo -e "${YELLOW}üí° Fix compilation errors before committing:${NC}"
    echo "   - Check syntax errors in your staged changes"  
    echo "   - Run './run.sh' to test the full build locally"
    echo "   - Stage your fixes and try committing again"
    echo
    exit 1
fi

# Validate release build compatibility for critical modules
echo "üèóÔ∏è Validating release build compatibility..."

# Check if staged files include TestConfiguration or critical modules that could affect release builds
CRITICAL_MODULES=$(echo "$STAGED_SWIFT_FILES" | grep -E "(Tests/TestConfiguration/|Tests/.*\.swift)" || true)
PACKAGE_SWIFT_CHANGED=$(echo "$STAGED_PACKAGE_SWIFT" | grep -E "Package\.swift" || true)

if [ -n "$CRITICAL_MODULES" ] || [ -n "$PACKAGE_SWIFT_CHANGED" ]; then
    echo "üîç Detected changes to test modules or Package.swift - validating release build..."
    
    # Run a quick release build check to catch @testable import and configuration issues
    RELEASE_BUILD_OUTPUT=$(swift build -c release --quiet 2>&1)
    RELEASE_BUILD_EXIT_CODE=$?
    
    if [ $RELEASE_BUILD_EXIT_CODE -ne 0 ]; then
        echo -e "${RED}‚ùå Release build validation failed:${NC}"
        echo
        echo "$RELEASE_BUILD_OUTPUT"
        echo
        echo -e "${YELLOW}üí° Common release build issues and fixes:${NC}"
        echo "   - @testable import usage: Replace with regular import and make APIs public"
        echo "   - Invalid Package.swift resources: Remove forbidden Info.plist resource declarations"
        echo "   - Missing public access: Add public modifiers to types used by test modules"
        echo "   - SPM configuration errors: Validate Package.swift target configurations"
        echo
        echo -e "${YELLOW}üîß To fix @testable import issues:${NC}"
        echo "   1. Make required types public in the main module"
        echo "   2. Replace @testable import with regular import in test files"
        echo "   3. Test locally: swift build -c release"
        echo "   4. Stage your fixes and commit again"
        echo
        exit 1
    fi
    
    echo -e "${GREEN}‚úÖ Release build validation passed!${NC}"
else
    echo "‚ÑπÔ∏è No critical module changes detected - skipping release build validation"
fi

echo -e "${GREEN}üéâ All pre-commit checks passed!${NC}"