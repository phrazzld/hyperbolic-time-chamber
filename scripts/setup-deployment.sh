#!/bin/bash

# =============================================================================
# TestFlight Deployment Setup Script
# 
# Helps configure the automated TestFlight deployment system by guiding
# through certificate setup, GitHub secrets configuration, and initial testing.
# =============================================================================

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
BOLD='\033[1m'
NC='\033[0m' # No Color

# Configuration
FASTLANE_DIR="fastlane"
CERTS_DIR="certs"

# Helper functions
log_info() {
    echo -e "${BLUE}🚀 $1${NC}"
}

log_success() {
    echo -e "${GREEN}✅ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}⚠️  $1${NC}"
}

log_error() {
    echo -e "${RED}❌ $1${NC}"
}

log_header() {
    echo ""
    echo -e "${BOLD}${BLUE}=== $1 ===${NC}"
    echo ""
}

# Check if required tools are available
check_dependencies() {
    log_info "Checking deployment setup dependencies..."
    
    # Check for Xcode
    if ! command -v xcodebuild &> /dev/null; then
        log_error "Xcode command line tools not found. Please install Xcode."
        exit 1
    fi
    
    # Check for git
    if ! command -v git &> /dev/null; then
        log_error "Git not found. Please install Git."
        exit 1
    fi
    
    # Check for Ruby (for Fastlane)
    if ! command -v ruby &> /dev/null; then
        log_error "Ruby not found. Please install Ruby."
        exit 1
    fi
    
    log_success "All required dependencies available"
}

# Display deployment setup overview
show_overview() {
    log_header "TestFlight Deployment Setup"
    
    echo "This script will help you set up automated TestFlight deployment for WorkoutTracker."
    echo ""
    echo "Setup Process:"
    echo "1. 📋 Gather required information (Apple Developer account details)"
    echo "2. 🔐 Configure certificates and provisioning profiles"
    echo "3. 🔑 Generate GitHub repository secrets"
    echo "4. 🧪 Test basic deployment configuration"
    echo "5. 📚 Provide next steps and documentation"
    echo ""
    echo "Prerequisites:"
    echo "- Apple Developer Program membership"
    echo "- App registered in App Store Connect"
    echo "- Distribution certificate and provisioning profile"
    echo "- App Store Connect API key"
    echo ""
    
    read -p "Continue with setup? (y/N): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
}

# Gather required information
gather_information() {
    log_header "Gathering Required Information"
    
    echo "Please provide the following information for your Apple Developer account:"
    echo ""
    
    # Team ID
    read -p "Apple Developer Team ID (e.g., ABCDEF1234): " TEAM_ID
    if [ -z "$TEAM_ID" ]; then
        log_error "Team ID is required"
        exit 1
    fi
    
    # Apple ID
    read -p "Apple ID email address: " APPLE_ID
    if [ -z "$APPLE_ID" ]; then
        log_error "Apple ID is required"
        exit 1
    fi
    
    # Bundle Identifier
    read -p "App Bundle Identifier (default: com.yourcompany.WorkoutTracker): " BUNDLE_ID
    BUNDLE_ID=${BUNDLE_ID:-"com.yourcompany.WorkoutTracker"}
    
    # App Store Connect API Key details
    echo ""
    echo "App Store Connect API Key information:"
    read -p "API Key ID (e.g., ABC123DEF4): " API_KEY_ID
    read -p "API Key Issuer ID (UUID format): " API_ISSUER_ID
    
    echo ""
    log_success "Information gathered successfully"
    
    # Store in environment file for reference
    cat > .env.deployment << EOF
# Deployment Configuration
# Generated by setup-deployment.sh on $(date)

TEAM_ID=$TEAM_ID
APPLE_ID=$APPLE_ID
BUNDLE_ID=$BUNDLE_ID
API_KEY_ID=$API_KEY_ID
API_ISSUER_ID=$API_ISSUER_ID
EOF
    
    log_info "Configuration saved to .env.deployment (do not commit this file)"
}

# Setup Fastlane if not already configured
setup_fastlane() {
    log_header "Setting up Fastlane"
    
    # Install Fastlane if not available
    if ! command -v fastlane &> /dev/null; then
        log_info "Installing Fastlane..."
        gem install fastlane --user-install
        
        # Add to PATH if needed
        if ! command -v fastlane &> /dev/null; then
            log_warning "Fastlane installed but not in PATH. You may need to add ~/.gem/ruby/*/bin to your PATH"
        fi
    else
        log_success "Fastlane already installed: $(fastlane --version | head -1)"
    fi
    
    # Verify Fastlane configuration exists
    if [ ! -d "$FASTLANE_DIR" ]; then
        log_error "Fastlane directory not found. This script should be run from the project root."
        exit 1
    fi
    
    # Update Appfile with gathered information
    log_info "Updating Fastlane configuration..."
    
    # Update bundle identifier in Appfile if needed
    if grep -q "com.yourcompany.WorkoutTracker" "$FASTLANE_DIR/Appfile"; then
        sed -i.bak "s/com.yourcompany.WorkoutTracker/$BUNDLE_ID/g" "$FASTLANE_DIR/Appfile"
        rm "$FASTLANE_DIR/Appfile.bak"
        log_success "Updated bundle identifier in Appfile"
    fi
    
    log_success "Fastlane configuration updated"
}

# Guide through certificate setup
setup_certificates() {
    log_header "Certificate Setup"
    
    echo "You need to set up certificates and provisioning profiles for code signing."
    echo ""
    echo "Choose your certificate management approach:"
    echo "1. Fastlane Match (Recommended for teams)"
    echo "2. Manual certificate management"
    echo ""
    
    read -p "Choose option (1 or 2): " -n 1 -r cert_option
    echo
    
    case $cert_option in
        1)
            setup_fastlane_match
            ;;
        2)
            setup_manual_certificates
            ;;
        *)
            log_error "Invalid option. Please choose 1 or 2."
            exit 1
            ;;
    esac
}

# Setup Fastlane Match
setup_fastlane_match() {
    log_info "Setting up Fastlane Match..."
    
    echo ""
    echo "Fastlane Match requires:"
    echo "- A private Git repository for storing encrypted certificates"
    echo "- A strong password for encrypting the certificates"
    echo ""
    
    read -p "Git repository URL for certificates (e.g., git@github.com:company/certificates.git): " MATCH_GIT_URL
    read -s -p "Encryption password for certificates: " MATCH_PASSWORD
    echo
    
    if [ -z "$MATCH_GIT_URL" ] || [ -z "$MATCH_PASSWORD" ]; then
        log_error "Both Git URL and password are required for Match"
        exit 1
    fi
    
    # Test Match setup (this will create certificates if they don't exist)
    echo ""
    log_info "Testing Fastlane Match configuration..."
    
    cd "$FASTLANE_DIR"
    
    # Export environment variables for testing
    export MATCH_GIT_URL="$MATCH_GIT_URL"
    export MATCH_PASSWORD="$MATCH_PASSWORD"
    
    # Initialize match if needed
    if ! fastlane match init --git_url "$MATCH_GIT_URL" --platform ios 2>/dev/null; then
        log_warning "Match initialization failed or already initialized"
    fi
    
    cd ..
    
    # Add Match configuration to environment file
    echo "" >> .env.deployment
    echo "# Fastlane Match Configuration" >> .env.deployment
    echo "MATCH_GIT_URL=$MATCH_GIT_URL" >> .env.deployment
    echo "MATCH_PASSWORD=$MATCH_PASSWORD" >> .env.deployment
    
    log_success "Fastlane Match configured"
    
    echo ""
    log_info "GitHub Secrets needed for Match:"
    echo "- MATCH_GIT_URL: $MATCH_GIT_URL"
    echo "- MATCH_PASSWORD: [hidden]"
}

# Setup manual certificates
setup_manual_certificates() {
    log_info "Setting up manual certificate management..."
    
    echo ""
    echo "Manual certificate management requires:"
    echo "1. iOS Distribution Certificate (exported as .p12 file)"
    echo "2. App Store Distribution Provisioning Profile (.mobileprovision file)"
    echo ""
    echo "To export certificates:"
    echo "1. Open Keychain Access"
    echo "2. Find your iOS Distribution certificate"
    echo "3. Right-click → Export → Personal Information Exchange (.p12)"
    echo "4. Set a password for the exported certificate"
    echo ""
    
    read -p "Path to distribution certificate (.p12 file): " CERT_PATH
    read -s -p "Certificate password: " CERT_PASSWORD
    echo
    read -p "Path to provisioning profile (.mobileprovision file): " PROFILE_PATH
    
    if [ ! -f "$CERT_PATH" ]; then
        log_error "Certificate file not found: $CERT_PATH"
        exit 1
    fi
    
    if [ ! -f "$PROFILE_PATH" ]; then
        log_error "Provisioning profile not found: $PROFILE_PATH"
        exit 1
    fi
    
    # Encode files to base64
    log_info "Encoding certificate and provisioning profile..."
    
    CERT_BASE64=$(base64 < "$CERT_PATH")
    PROFILE_BASE64=$(base64 < "$PROFILE_PATH")
    
    # Add to environment file
    echo "" >> .env.deployment
    echo "# Manual Certificate Configuration" >> .env.deployment
    echo "DISTRIBUTION_CERTIFICATE_P12_BASE64=$CERT_BASE64" >> .env.deployment
    echo "DISTRIBUTION_CERTIFICATE_PASSWORD=$CERT_PASSWORD" >> .env.deployment
    echo "PROVISIONING_PROFILE_BASE64=$PROFILE_BASE64" >> .env.deployment
    
    log_success "Manual certificates configured"
    
    echo ""
    log_info "GitHub Secrets needed for manual certificates:"
    echo "- DISTRIBUTION_CERTIFICATE_P12_BASE64: [base64 encoded certificate]"
    echo "- DISTRIBUTION_CERTIFICATE_PASSWORD: [certificate password]"
    echo "- PROVISIONING_PROFILE_BASE64: [base64 encoded profile]"
}

# Setup App Store Connect API Key
setup_api_key() {
    log_header "App Store Connect API Key Setup"
    
    echo "Please provide your App Store Connect API Key file (.p8 file)."
    echo ""
    echo "To create an API key:"
    echo "1. Go to App Store Connect → Users and Access → Keys"
    echo "2. Click the '+' button to create a new key"
    echo "3. Set role to 'App Manager' or 'Developer'"
    echo "4. Download the .p8 file"
    echo ""
    
    read -p "Path to API key file (.p8): " API_KEY_PATH
    
    if [ ! -f "$API_KEY_PATH" ]; then
        log_error "API key file not found: $API_KEY_PATH"
        exit 1
    fi
    
    # Encode API key to base64
    API_KEY_BASE64=$(base64 < "$API_KEY_PATH")
    
    # Add to environment file
    echo "" >> .env.deployment
    echo "# App Store Connect API Key" >> .env.deployment
    echo "APP_STORE_CONNECT_API_KEY=$API_KEY_BASE64" >> .env.deployment
    
    log_success "App Store Connect API key configured"
}

# Generate GitHub secrets summary
generate_secrets_summary() {
    log_header "GitHub Secrets Configuration"
    
    echo "Add the following secrets to your GitHub repository:"
    echo "(Settings → Secrets and variables → Actions → New repository secret)"
    echo ""
    
    # Required secrets
    echo "Required Secrets:"
    echo "=================="
    echo "TEAM_ID: $TEAM_ID"
    echo "APPLE_ID: $APPLE_ID"
    echo "APP_STORE_CONNECT_API_KEY_ID: $API_KEY_ID"
    echo "APP_STORE_CONNECT_API_ISSUER_ID: $API_ISSUER_ID"
    echo "APP_STORE_CONNECT_API_KEY: [from .env.deployment file]"
    echo ""
    
    # Certificate-specific secrets
    if grep -q "MATCH_GIT_URL" .env.deployment; then
        echo "Fastlane Match Secrets:"
        echo "======================="
        echo "MATCH_GIT_URL: [from .env.deployment file]"
        echo "MATCH_PASSWORD: [from .env.deployment file]"
    else
        echo "Manual Certificate Secrets:"
        echo "==========================="
        echo "DISTRIBUTION_CERTIFICATE_P12_BASE64: [from .env.deployment file]"
        echo "DISTRIBUTION_CERTIFICATE_PASSWORD: [from .env.deployment file]"
        echo "PROVISIONING_PROFILE_BASE64: [from .env.deployment file]"
    fi
    
    echo ""
    log_warning "IMPORTANT: The .env.deployment file contains sensitive data."
    log_warning "Copy the values to GitHub Secrets, then delete the file."
    log_warning "Never commit .env.deployment to version control."
}

# Test basic configuration
test_configuration() {
    log_header "Testing Configuration"
    
    echo "Testing basic Fastlane configuration..."
    
    cd "$FASTLANE_DIR"
    
    # Test Fastlane lanes
    if fastlane lanes > /dev/null 2>&1; then
        log_success "Fastlane configuration is valid"
    else
        log_error "Fastlane configuration has errors"
        return 1
    fi
    
    cd ..
    
    # Test project build
    echo ""
    log_info "Testing project build..."
    
    if swift build > /dev/null 2>&1; then
        log_success "Project builds successfully"
    else
        log_warning "Project build failed - check for compilation errors"
    fi
    
    log_success "Basic configuration test completed"
}

# Provide next steps
show_next_steps() {
    log_header "Next Steps"
    
    echo "🎉 TestFlight deployment setup is complete!"
    echo ""
    echo "Next steps:"
    echo ""
    echo "1. 🔐 Configure GitHub Secrets:"
    echo "   - Go to your repository Settings → Secrets and variables → Actions"
    echo "   - Add all secrets listed above"
    echo "   - Copy values from .env.deployment file"
    echo ""
    echo "2. 🧹 Clean up sensitive files:"
    echo "   rm .env.deployment"
    echo ""
    echo "3. 🧪 Test deployment:"
    echo "   - Go to GitHub Actions tab"
    echo "   - Run 'Deploy to TestFlight' workflow manually"
    echo "   - Monitor logs for any issues"
    echo ""
    echo "4. 📱 Set up TestFlight:"
    echo "   - Configure testing groups in App Store Connect"
    echo "   - Add internal and external testers"
    echo "   - Set up automatic notifications"
    echo ""
    echo "5. 🚀 Deploy your first build:"
    echo "   git tag v1.0.0"
    echo "   git push origin v1.0.0"
    echo ""
    echo "📚 Documentation:"
    echo "   - Read DEPLOYMENT.md for detailed information"
    echo "   - Check fastlane/Fastfile for configuration options"
    echo "   - Review .github/workflows/deploy-testflight.yml for workflow details"
    echo ""
    
    log_success "Setup completed successfully!"
}

# Main execution
main() {
    log_info "Starting TestFlight deployment setup..."
    
    check_dependencies
    show_overview
    gather_information
    setup_fastlane
    setup_certificates
    setup_api_key
    generate_secrets_summary
    test_configuration
    show_next_steps
}

# Run main function
main "$@"