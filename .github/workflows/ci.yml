name: CI

on:
  push:
    branches: [ main, quality-gates ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-coverage:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Cache Swift Package Manager
      uses: actions/cache@v3
      with:
        path: .build
        key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.swift') }}
        restore-keys: |
          ${{ runner.os }}-spm-
    
    - name: Install SwiftLint
      run: brew install swiftlint
    
    - name: Run SwiftLint
      run: swiftlint lint --reporter github-actions-logging
    
    - name: Build Project
      run: swift build
    
    - name: Run Tests with Coverage
      run: |
        chmod +x scripts/generate-coverage.sh
        ./scripts/generate-coverage.sh
    
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: coverage/
        retention-days: 30
    
    - name: Comment Coverage Summary on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage summary
          let coverageSummary = '';
          try {
            const summaryPath = 'coverage/coverage-summary.txt';
            if (fs.existsSync(summaryPath)) {
              const summary = fs.readFileSync(summaryPath, 'utf8');
              const lines = summary.split('\n');
              const totalLine = lines.find(line => line.includes('TOTAL'));
              
              if (totalLine) {
                const parts = totalLine.trim().split(/\s+/);
                const linesCoverage = parts[parts.length - 1];
                const functionsCoverage = parts[5];
                
                coverageSummary = `## üìä Test Coverage Report
          
          **Overall Coverage:**
          - Line Coverage: ${linesCoverage}
          - Function Coverage: ${functionsCoverage}
          
          **Business Logic Coverage:**
          `;
                
                // Add business logic component coverage
                const businessLogicLines = lines.filter(line => 
                  line.includes('Models/') || 
                  line.includes('Services/') || 
                  line.includes('ViewModels/')
                );
                
                businessLogicLines.forEach(line => {
                  const parts = line.trim().split(/\s+/);
                  const filename = parts[0];
                  const coverage = parts[parts.length - 1];
                  coverageSummary += `- ${filename}: ${coverage}\n`;
                });
                
                coverageSummary += `
          
          üìÅ **Detailed Reports:** Check the "coverage-reports" artifact for HTML reports.
          
          > Coverage thresholds: Line ‚â•12%, Function ‚â•45%, Business Logic ‚â•90%`;
              }
            }
          } catch (error) {
            coverageSummary = '‚ùå Failed to generate coverage summary. Check logs for details.';
          }
          
          if (coverageSummary) {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: coverageSummary
            });
          }
    
    - name: Check Coverage Thresholds
      run: |
        echo "Coverage check completed. Review artifacts for detailed reports."
        if [ -f coverage/coverage-summary.txt ]; then
          echo "Coverage summary generated successfully"
          # Note: The generate-coverage.sh script already handles threshold validation
          # and will exit with non-zero code if thresholds are not met
        else
          echo "‚ùå Coverage summary not found"
          exit 1
        fi