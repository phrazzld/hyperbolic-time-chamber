---
name: PR Validation

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'Sources/**'
      - 'Tests/**'
      - 'Package.swift'
      - '.swiftlint.yml'

jobs:
  validate:
    name: Validate - ${{ matrix.name }}
    runs-on: macos-latest
    timeout-minutes: 20
    strategy:
      matrix:
        include:
          - xcode-version: '15.4'
            ios-target: '17.0'
            name: 'Xcode 15.4 (iOS 17 Support)'
          - xcode-version: '16.0'
            ios-target: '18.0'
            name: 'Xcode 16.0 (iOS 18 Support)'
          - xcode-version: 'latest-stable'
            ios-target: '18.2'
            name: 'Latest Xcode (Current iOS)'
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: ${{ matrix.xcode-version }}

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            SourcePackages
          key: ${{ runner.os }}-spm-xcode${{ matrix.xcode-version }}-${{ hashFiles('Package.swift') }}
          restore-keys: |
            ${{ runner.os }}-spm-xcode${{ matrix.xcode-version }}-
            ${{ runner.os }}-spm-

      - name: Install SwiftLint
        run: |
          # Install SwiftLint for consistency with local development
          brew install swiftlint

      - name: Verify Development Environment
        run: |
          echo "🔧 Testing with ${{ matrix.name }}"
          echo "📱 Target iOS version: ${{ matrix.ios-target }}"
          swift --version
          xcodebuild -version
          echo ""
          echo "📋 Available iOS simulators for target version:"
          xcrun simctl list runtimes | grep iOS

      - name: Resolve Package Dependencies
        run: |
          swift package resolve

      - name: Run SwiftLint
        run: |
          echo "🔍 Running SwiftLint validation..."
          swiftlint lint --reporter github-actions-logging

      - name: Build Project
        run: |
          echo "🔨 Building project..."
          swift build

      - name: Run Tests with Timeout
        run: |
          echo "🧪 Running comprehensive test suite with ${{ matrix.name }}..."
          echo "📱 Supporting iOS ${{ matrix.ios-target }}+ runtime environment"
          # Use timeout to prevent hanging tests (matching local pre-push hook)
          timeout 45s swift test --parallel || {
            exit_code=$?
            if [ $exit_code -eq 124 ]; then
              echo "❌ Tests timed out after 45 seconds with ${{ matrix.name }}"
              echo "This may indicate hanging tests or performance issues"
              exit 1
            else
              echo "❌ Tests failed with ${{ matrix.name }} (code: $exit_code)"
              exit $exit_code
            fi
          }

      - name: Verify Test Coverage
        run: |
          echo "📊 Analyzing test results with ${{ matrix.name }}..."
          
          # Run tests again with verbose output to get detailed results
          swift test 2>&1 | tee test_output.log

          # Extract test count
          total_tests=$(grep -o "Executed [0-9]* tests" test_output.log | \
            tail -1 | grep -o "[0-9]*" || echo "0")

          echo "✅ Executed $total_tests tests with ${{ matrix.name }}"

          # Verify we have comprehensive test coverage
          if [ "$total_tests" -lt 70 ]; then
            echo "⚠️  Warning: Test count ($total_tests) seems low."
            echo "Expected 70+ tests."
            echo "This may indicate missing tests or test discovery issues."
          fi

          # Clean up
          rm -f test_output.log

      - name: Build Release Configuration
        run: |
          echo "🏗️  Verifying Release build..."
          swift build -c release

      - name: Summary
        if: always()
        run: |
          echo "## PR Validation Summary - ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ **All checks passed with ${{ matrix.name }}!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ SwiftLint validation" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Debug build successful" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ Release build successful" >> $GITHUB_STEP_SUMMARY
            echo "- ✅ All tests passing (76 comprehensive tests)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔧 **Environment: ${{ matrix.name }}**" >> $GITHUB_STEP_SUMMARY
            echo "📱 **iOS Target: ${{ matrix.ios-target }}+**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Validation failed with ${{ matrix.name }}**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please check the logs above and fix any issues." >> \
              $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "🔧 **Failed Environment: ${{ matrix.name }}**" >> $GITHUB_STEP_SUMMARY
            echo "📱 **iOS Target: ${{ matrix.ios-target }}+**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "💡 **Common fixes:**" >> $GITHUB_STEP_SUMMARY
            echo "- Run \`swiftlint --fix\` to auto-fix style issues" >> \
              $GITHUB_STEP_SUMMARY
            echo "- Run \`swift test\` locally to debug test failures" >> \
              $GITHUB_STEP_SUMMARY
            echo "- Run \`swift build\` to check for build issues" >> \
              $GITHUB_STEP_SUMMARY
          fi
